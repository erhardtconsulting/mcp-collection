name: Build and Publish Container

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: erhardtconsulting/mcp-collection

permissions:
  actions: write
  contents: read
  packages: write

jobs:
  get-version:
    runs-on: ubuntu-24.04
    outputs:
      app: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install jq dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get Project version
        id: version
        run: |
          echo "VERSION=$(jq -r '.version' root/app/package.json)" >> $GITHUB_OUTPUT

  build-image:
    name: Build image
    runs-on: ubuntu-24.04
    needs: get-version

    strategy:
      matrix:
        arch: ${{ github.event_name == 'pull_request' && fromJSON('["amd64"]') || fromJSON('["amd64", "arm64"]') }}

    steps:
      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup environment variables
        run: |
          echo "PLATFORM=${PLATFORM}" >> ${GITHUB_ENV}
          [ "${PLATFORM}" = "amd64" ] && echo "BUILDAH_ARCH=linux/amd64" >> ${GITHUB_ENV} || true
          [ "${PLATFORM}" = "arm64" ] && echo "BUILDAH_ARCH=linux/arm64/v8" >> ${GITHUB_ENV} || true
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "IMAGE_TAG=${VERSION}-${PLATFORM}" >> ${GITHUB_ENV}
        env:
          PLATFORM: ${{ matrix.arch }}
          VERSION: ${{ needs.get-version.outputs.app }}

      - name: Build image with buildah
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}
          platform: ${{ env.BUILDAH_ARCH }}
          context: .
          containerfiles: |
            Dockerfile

      - name: Create tar image
        run: |
          buildah push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} oci-archive:/tmp/${{ env.IMAGE_TAG }}.tar

      - name: Upload container
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar
          if-no-files-found: error
          retention-days: 1

  push:
    if: github.event_name != 'pull_request'
    name: Push image
    runs-on: ubuntu-24.04
    needs:
      - get-version
      - build-image
    steps:
      - name: Setup environment variables
        run: |
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
        env:
          VERSION: ${{ needs.get-version.outputs.app }}

      - name: Download all artifacts
        run: |
          mkdir -p /tmp
          for arch in "arm64" "amd64"; do
            echo "==> Downloading artifact: $arch"
            gh run --repo "${{ github.server_url }}/${{ github.repository }}" download "${GITHUB_RUN_ID}" --name "${{ env.VERSION }}-$arch" --dir /tmp
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List images
        run: ls -lh /tmp

      - name: Create multiarch-manifest
        run: |
          buildah manifest create "${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          for arch in "arm64" "amd64"; do
            echo "==> Adding: $arch"
            buildah manifest add "${{ env.IMAGE_NAME }}:${{ env.VERSION }}" oci-archive:/tmp/${{env.VERSION}}-$arch.tar
          done

      - name: Add tags
        run: |
          buildah tag "${{ env.IMAGE_NAME }}:${{ env.VERSION }}" "ghcr.io/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          buildah tag "${{ env.IMAGE_NAME }}:${{ env.VERSION }}" "ghcr.io/${{ env.IMAGE_NAME }}:latest"

      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Push image to ghcr.io
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          registry: ghcr.io
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.VERSION }} latest
